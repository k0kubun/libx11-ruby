#!/usr/bin/env ruby

require 'bundler/setup'
require 'strscan'
require_relative 'typesym'

target = ARGV[0]
abort "'#{target}' does not exist" unless File.exist?(target)

source = File.read(target)
decls  = source.scan(/extern [^\n]+ [^ ]+ ?\([^\(\)]+\);/m)

class FFIGenerator
  BLOCKING_FUNCTIONS = %w[XSync XNextEvent]

  def initialize(decls)
    @decls = decls
  end

  def print_ffi
    @decls.each do |decl|
      puts ffi_by_decl(decl)
    end
  end

  private

  def preprocess(decl)
    decl.gsub(/#if NeedWidePrototypes\n[^\n]+\n#else\n([^\n]+)\n#endif\n/m, '\1' << "\n")
  end

  def ffi_by_decl(decl)
    if decl == 'extern Bool XSupportsLocale (void);'
      return 'attach_function :XSupportsLocale, [], :bool'
    end

    definition, *params = preprocess(decl).split("\n")
    params.delete_at(-1)
    _, type, _, func = definition.match(/\Aextern ((unsigned )?[^ ]+ \**)([^ ]+) ?\(\z/).to_a

    param_syms = params.map { |param| typesym(param_to_type(param))}
    param_syms = [] if param_syms == [':void']

    ffi = "attach_function :#{func}, [#{param_syms.join(', ')}], #{typesym(type.strip)}"
    ffi.concat(', blocking: true') if BLOCKING_FUNCTIONS.include?(func)
    ffi
  rescue => e
    puts
    puts e.backtrace.join("\n")
    abort "Failed to parse!:\n\n#{decl}\n\n#{e.message}"
  end

  def typesym(type)
    Typesym.typesym(type)
  end

  def param_to_type(param)
    s = StringScanner.new(param)
    s.scan(/ +/)
    s.scan_until(/(,|\/\*|\z)/).sub(/(,|\/\*)/, '').sub(/ ?_Xconst ?/, '').strip
  end
end

FFIGenerator.new(decls).print_ffi
